use std::str::FromStr;
use lalrpop_util::ParseError;

use super::SemanticError;
use super::types::Numeric;
use super::ast;

grammar;

extern {
    type Error = SemanticError;
    type Location = usize;
}

pub Exprs = Expr*;

pub Expr: ast::Expr = {
    Num => ast::Expr::Number(<>),
    ID => ast::Expr::Identifier(String::from(<>)),
    Symbol => ast::Expr::Symbol(String::from(<>)),
    String => ast::Expr::String(String::from(<>)),
    PseudoValue => ast::Expr::PseudoValue(String::from(<>)),
    "'" <Expr> => ast::Expr::Quoted(Box::new(<>)),
    "(" <Expr*> ")" => ast::Expr::List(<>),
    "[" <Expr*> "]" => ast::Expr::Vector(<>),
    "{" <(<Expr> "=>" <Expr>)*> "}" => ast::Expr::Map(<>),
};

Num: Numeric = {
    Digits =>? Numeric::from_str(<>)
        .map_err(|_| ParseError::User {
            error: SemanticError::NumberLiteralOverflow
        })
};

String: &'input str = {
    <s:StringLiteral> => &s[1..s.len()-1]
}

PseudoValue: &'input str = {
    <s:PseudoValueLiteral> => &s[1..]
}

ID: &'input str = {
    <IdentifierLiteral>,
    <"*">,
    <"/">,
    <"+">,
    <"-">,
}

match {
    "+",
    "-",
    "*",
    "/",
    "\"",
    "`",
    "'",
    "(",
    ")",
    "{",
    "}",
    "[",
    "]",
    "_",
    "=>",
    "...",

    r"[0-9]+" => Digits,
    r#""(\\\\|\\"|[^"\\])*""# => StringLiteral,
    r"#[A-Za-z_]*" => PseudoValueLiteral,
} else {
    r"[\w|\$](\w|-|:|\.)*\??!?" => IdentifierLiteral,
    r":[\w_\$\.-]+" => Symbol,
} else {
    // Ignore whitespace and comments
    r"\s*" => { },
    r";[^\n\r]*[\n\r]*" => { },
}
