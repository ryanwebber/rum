;
; Core Module Prelude
;

((#bridge :core.def-macro)
    'def-macro! '(name args body) '((#bridge :core.def-macro) name args body))

(def-macro! def-fn! (name args body) ((#bridge :core.def-fn) name args body))
(def-macro! lambda! (args body) ((#bridge :core.lambda) args body))

(def-fn! call (f args) ((#bridge :core.call) f args))
(def-fn! eval (source) ((#bridge :core.eval) source))

(def-fn! get (receiver key) ((#bridge :core.get) receiver key))
(def-fn! set (receiver key value) ((#bridge :core.set) receiver key value))

(def-fn! first (receiver) ((#bridge :core.first) receiver))
(def-fn! last (receiver) ((#bridge :core.last) receiver))
(def-fn! append (receiver value) ((#bridge :core.append) receiver value))

(def-macro! match! (lhs patterns) ((#bridge :core.match) lhs patterns))

(def-macro! let! (assignments expr) ((#bridge :core.let) assignments expr))

(def-fn! do () (last (get #meta :args)))

(def-fn! equal? () (call (#bridge :core.equal) (get #meta :args)))
(def-fn! and? () (call (#bridge :core.and) (get #meta :args)))
(def-fn! or? () (call (#bridge :core.or) (get #meta :args)))
