(def-type vec3 (x y z))

(set (meta-table vec3) :typedoc
    { :x => float
      :y => float
      :z => float })

(set (meta-table vec3) :call
    (lambda (a b c) (new vec3 (a b c))))

(def-component :position vec3)

(def-system :render
    (and
        (has :position)
        (has :sprite))
    (lambda (entity)
        (print `entity/position/x`)
        (print (dot3 `entity/position` `entity/position`))
        (set entity :position (vec3 0 0 0))))

(def-local mything [0 0 0])
(def-local mything { 1 => 2 })

(def-obj "Player"
    (make-component :position (0 0 0))
    (make-component :sprite `$res/path/to/script.png`))

(match mything
    {
        0 => "Literal zero"
        [] => "Empty"
        [0] => "One zero"
        [_] => "One thing"
        [0 _ 1] => "Zero something one"
        [0 ...] => "Zero then things"
        [...] => "Some array"
        _ => "Anything else" })

(include `$res/path/to/script.rum`)

(#True #False #FooBar)

; Language Types:
;   - List
;   - Map
;   - Numbers
;   - Path
;   - Placeholder
;   - Strings
;   - Symbol
;   - Values
;   - Vector

; VM Types:
;   - Boolean
;   - Extern
;   - List
;   - Numbers
;   - Strings
;   - Symbols
;   - Table
;   - Unbound
;   - Vector
